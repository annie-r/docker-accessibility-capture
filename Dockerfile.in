{# #############################################################################
# This file compiles to Dockerfile.
############################################################################ -#}
#
# This file compiled from Dockerfile.in.
#

{% set current_dockerfile_config = dockerfile.main -%}

FROM {{ current_dockerfile_config.base_image }}

{# #############################################################################
# Core configuration of the environment. We should always include these.
############################################################################ -#}
{% include 'base/dockerfile/environment.Dockerfile' %}

{% include 'base/dockerfile/apt-get-essentials.Dockerfile' %}

{# #############################################################################
# Different runtimes we may want to include.
#
# {% include 'base/dockerfile/python.Dockerfile' %}
# {% include 'base/dockerfile/ruby.Dockerfile' %}
# {% include 'base/dockerfile/node.Dockerfile' %}
############################################################################ -#}

RUN sudo apt-get update
RUN sudo apt-get install -y software-properties-common

RUN sudo add-apt-repository ppa:webupd8team/java
RUN sudo apt-get update
RUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections
RUN sudo apt-get install -y oracle-java8-installer
RUN sudo apt-get install -y oracle-java8-set-default

#
# https://github.com/chuross/docker/blob/master/android-java/8/Dockerfile
#

RUN dpkg --add-architecture i386 \
  && apt-get -yq update \
  && apt-get -yq install libncurses5:i386 libstdc++6:i386 zlib1g:i386 --no-install-recommends \
  && apt-get clean

# Android arguments
ARG ANDROID_SDK_VERSION="24.4.1"

ENV ANDROID_SDK_URL http://dl.google.com/android/android-sdk_r${ANDROID_SDK_VERSION}-linux.tgz
ENV ANDROID_HOME /usr/local/android-sdk-linux
ENV PATH ${ANDROID_HOME}/tools:$ANDROID_HOME/platform-tools:$PATH

# Android components
ENV ANDROID_COMPONENTS platform-tools

# install Android
RUN curl -sL "${ANDROID_SDK_URL}" | tar xz --no-same-owner -C /usr/local
RUN echo y | android update sdk --no-ui --all --filter "${ANDROID_COMPONENTS}"

#
# For ARM video emulation
#

RUN DEBIAN_FRONTEND=noninteractive apt-get install -y libqt5widgets5
ENV QT_QPA_PLATFORM offscreen
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${ANDROID_HOME}/tools/lib64

#
# https://github.com/chuross/docker/blob/master/android-emulator/Dockerfile
#

ARG TARGET_API="android-24"
ARG STORAGE_SIZE="256M"
ARG SKIN="QVGA"

ENV ANDROID_TARGET_API $TARGET_API
ENV ANDROID_EMULATOR_STORAGE_SIZE $STORAGE_SIZE
ENV ANDROID_EMULATOR_SKIN $SKIN
ENV ANDROID_EMULATOR_MEMORY 1024
ENV ANDROID_EMULATOR_NAME "armeabi-v7a-${ANDROID_TARGET_API}"
ENV ANDROID_EMULATOR_COMPONENTS $ANDROID_TARGET_API,sys-img-${ANDROID_EMULATOR_NAME}
ENV ANDROID_EMULATOR_PATH $ANDROID_HOME/../emulators
ENV ANDROID_EMULATOR_PORT 5554
ENV ADB_PORT 5555

EXPOSE $ADB_PORT
EXPOSE $ANDROID_EMULATOR_PORT

RUN apt-get install -y socat net-tools

WORKDIR $ANDROID_HOME
RUN rm -rf platforms/$ANDROID_TARGET_API
RUN echo y | android update sdk --no-ui --all --filter "${ANDROID_EMULATOR_COMPONENTS}"

RUN android list targets \
      && android list sdk -a -e -u \
      && echo no | android create avd --force \
                                  -n $ANDROID_EMULATOR_NAME \
                                  -t $ANDROID_TARGET_API \
                                  -c $ANDROID_EMULATOR_STORAGE_SIZE \
                                  -s $ANDROID_EMULATOR_SKIN \
      && echo hw.ramSize=$ANDROID_EMULATOR_MEMORY >> ~/.android/avd/${ANDROID_EMULATOR_NAME}.ini


{# This comment gives us a newline at the end of the generated file #}

################################################################################
# Set up our entrypoint script.
################################################################################
COPY docker-accessibility-capture/docker-accessibility-capture-entrypoint.sh /docker-accessibility-capture-entrypoint.sh
RUN dos2unix /docker-accessibility-capture-entrypoint.sh && \
    chmod +x /docker-accessibility-capture-entrypoint.sh

# Run the wrapper script
CMD ["/docker-accessibility-capture-entrypoint.sh"]
{# This comment gives us a newline at the end of the generated file #}
